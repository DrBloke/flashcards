---
let { data } = Astro.props;
data = {
    ...JSON.parse(data),
    homeRoute: import.meta.env.BASE_URL,
};
data = JSON.stringify(data);
---

<template id="flashcard">
    <style>
        div#wrapper {
            display: flex;
            flex-direction: column;
            /* justify-content: space-between; */
            height: 100%;
        }
        header {
            display: flex;
            justify-content: space-between;
            padding: var(--wa-space-xs) var(--wa-space-xs);
        }
        h1 {
            font-size: var(--wa-font-size-m);
            color: var(--wa-color-brand-on-quiet);
            margin: 0;
        }
        main {
            flex-grow: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: var(--wa-font-size-4xl);
        }
        footer {
            display: flex;
            justify-content: flex-end;
            padding: var(--wa-space-xs) var(--wa-space-xs);
        }
        span.toolbar {
            display: flex;
            justify-content: space-between;
            min-width: 190px;
        }
        wa-button#flip {
            width: 100%;
        }
    </style>

    <div id="wrapper">
        <header>
            <wa-button href="homeRouteHere" id="home">Home</wa-button>
            <h1>Title</h1>
        </header>
        <main>
            <div id="content">Flashcard content appears here</div>
        </main>
        <footer>
            <span class="toolbar">
                <wa-button id="flip" variant="brand">Flip</wa-button>
            </span>
        </footer>
    </div>
</template>

<flashcard-component data-deck={data}> </flashcard-component>

<script>
    import "https://early.webawesome.com/webawesome@3.0.0-alpha.12/dist/components/button/button.js";
    function assert(condition: boolean, message: string): asserts condition {
        if (!condition) {
            throw new Error(message);
        }
    }

    class Flashcard extends HTMLElement {
        constructor() {
            super();
            const template = document.getElementById("flashcard");
            assert(
                template instanceof HTMLTemplateElement,
                "A <template> of id 'flashcard' needs to exist in the DOM.",
            );
            const templateContent = template.content;
            const shadow = this.attachShadow({ mode: "open" });
            shadow.appendChild(templateContent.cloneNode(true));
        }

        connectedCallback() {
            type Deck = {
                title: string;
                cards: { side1: string; side2: string }[];
                homeRoute: string;
            };

            // Read the message from the data attribute.
            const data = this.dataset.deck;
            assert(
                typeof data === "string",
                "data must be defined on flashcard component",
            );
            const deck = JSON.parse(data) as Deck;
            const deckTitle = deck.title;
            assert(typeof deckTitle === "string", "Title must be a string");
            const homeRoute = deck.homeRoute;
            assert(
                typeof homeRoute === "string",
                "Home route should be a string representing the route page",
            );

            // assert(Array.isArray(deck.cards), "deck.cards should be an array");

            // deck.cards.map((card: { side1: string; side2: string }) => {
            //     assert(
            //         typeof card.side1 === "string" && card.side1 !== "",
            //         ` deck.cards.side1 must be a not empty string. It is "${card.side1}"`,
            //     );
            //     assert(
            //         typeof card.side2 === "string" && card.side2 !== "",
            //         ` deck.cards.side2 must be a not empty string. It is "${card.side2}"`,
            //     );
            // });

            // Set initial state
            const state = {
                allCards: deck.cards,
                remainingCards: deck.cards,
            };

            // Set up selectors
            assert(
                this.shadowRoot !== null,
                "There should be a shadow root on the component",
            );

            const title = this.shadowRoot.querySelector("h1");
            const content = this.shadowRoot.querySelector("div#content");
            const toolbar = this.shadowRoot.querySelector("span.toolbar");
            const anchorTag = this.shadowRoot.querySelector("wa-button#home");

            assert(
                title !== null,
                "The title node is missing from the component",
            );
            assert(
                content !== null,
                "The content node is missing from the component",
            );
            assert(
                toolbar !== null,
                "The toolbar node is missing from the component",
            );
            assert(
                anchorTag !== null,
                "The homeRoot node is missing from the component",
            );

            // Initial render
            title.innerText = deck.title;
            content.innerHTML = state.remainingCards[0].side1;
            anchorTag.setAttribute("href", deck.homeRoute);

            // Events. This is where state mutation should occur

            const flipClicked = () => {
                let currentCard = state.remainingCards[0];
                if (content !== null) {
                    const newButtons = `
                            <wa-button id="correct" variant="success">Correct</wa-button>
                            <wa-button id="incorrect" variant="danger">Incorrect</wa-button>`;
                    toolbar.innerHTML = newButtons;
                    content.innerHTML = currentCard.side2;

                    assert(
                        this.shadowRoot !== null,
                        "There should be a shadow root on the component",
                    );
                    const incorrect =
                        this.shadowRoot.querySelector("#incorrect");
                    assert(
                        incorrect !== null,
                        "There should be an incorrect button on the component",
                    );
                    incorrect.addEventListener("click", incorrectClicked);
                    const correct = this.shadowRoot.querySelector("#correct");
                    assert(
                        correct !== null,
                        "There should be an incorrect button on the component",
                    );
                    correct.addEventListener("click", correctClicked);
                }
            };

            const incorrectClicked = () => {
                let currentCard = state.remainingCards[0];
                if (content !== null) {
                    toolbar.innerHTML = `<wa-button id="flip" variant="brand">Flip</wa-button>`;
                    state.remainingCards.shift();
                    state.remainingCards.push(currentCard);
                    currentCard = state.remainingCards[0];
                    content.innerHTML = currentCard.side1;

                    assert(
                        this.shadowRoot !== null,
                        "There should be a shadow root on the component",
                    );
                    const flip = this.shadowRoot.querySelector("#flip");
                    assert(
                        flip !== null,
                        "There should be an flip button on the component",
                    );
                    flip.addEventListener("click", flipClicked);
                }
            };

            const correctClicked = () => {
                let currentCard = state.remainingCards[0];
                if (content !== null) {
                    state.remainingCards.shift();
                    if (state.remainingCards.length === 0) {
                        document.location = deck.homeRoute;
                    } else {
                        toolbar.innerHTML = `<wa-button id="flip" variant="brand">Flip</wa-button>`;
                        currentCard = state.remainingCards[0];
                        content.innerHTML = currentCard.side1;

                        assert(
                            this.shadowRoot !== null,
                            "There should be a shadow root on the component",
                        );
                        const flip = this.shadowRoot.querySelector("#flip");
                        assert(
                            flip !== null,
                            "There should be an flip button on the component",
                        );
                        flip.addEventListener("click", flipClicked);
                    }
                }
            };

            const flip = this.shadowRoot.querySelector("#flip");
            assert(
                flip !== null,
                "There should be an flip button on the component",
            );
            flip.addEventListener("click", flipClicked);
        }
    }

    customElements.define("flashcard-component", Flashcard);
</script>
